chuchu[i] <- lapply(temp, read.table, header = FALSE)
temp=grep(pattern=reg.exp,i_tam,value=TRUE)
temp
chuchu[i] <- lapply(as.list(temp), read.table, header = FALSE)
chuchu[,i] <- lapply(as.list(temp), read.table, header = FALSE)
tfiles=list.files(pattern = temp)
chuchu[,i] <- lapply(temp, read.table, header = FALSE)
x_tam=  lapply(temp, read.table, header = FALSE)
x_tam=  lapply(temp, read.table, header = FALSE)
tablesxtam <- lapply(x_tam, read.table, header = FALSE)
tablesxtam <- lapply(x_tam, read.table, header = FALSE)
x_tam=  lapply(tfiles, read.table, header = FALSE)
tablesxtam <- lapply(x_tam, read.table, header = FALSE)
setwd("C:/Users/Vrios/Dropbox/Doutorado/codigo/socrats/Socrats_Doc_replicas")
library("matrixStats")
i_tam  <- list.files(pattern = 'g_tam_')
temp_length <- read.table(textConnection(i_tam), sep = "_")
mem_lengths = unique(temp_length[17])
mem_lengths=sort(mem_lengths[,])
n_iter=2000
la=0
z=600
n_iter=2000
reg=paste('g_tam.*',as.character(z),'.*', sep="")
la=grep(pattern=reg,i_tam,value=TRUE)
la
mem_x =lapply(as.character(mem_match), read.table, header = FALSE)
walla=0
chuchu=0
chuchu=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
i=1
reg.exp=paste('g_tam.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,i_tam,value=TRUE)
tfiles=list.files(pattern = temp)
x_tam=  lapply(tfiles, read.table, header = FALSE)
files  <- list.files(pattern = 'g_tam_')
#read memory lengths from filenames
temp_length <- read.table(textConnection(files), sep = "_")
mem_lengths = unique(temp_length[17])
mem_lengths=sort(mem_lengths[,])
#expressão regular g_tam.*tMem_2000.* -> retorna tudo que tiver g_tam e tMem_2000 em qualquer lugar da string
la=0
z=600
n_iter=2000
walla=0
chuchu=0
chuchu=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
i=1
reg.exp=paste('g_tam.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
tfiles=list.files(pattern = temp)
i_tam=list.files(pattern = temp)
reg.exp=paste('g_tam.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_tam=list.files(pattern = temp)
tablesitam <- lapply(i_tam, read.table, header = FALSE)
tam=as.data.frame(tablesitam)#dados brutos
chuchu[,i]= as.data.frame(rowMeans(tam))
View(chuchu)
View(chuchu)
for (i in 1:length(mem_lengths))
{
reg.exp=paste('g_tam.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_tam=list.files(pattern = temp)
tablesitam <- lapply(i_tam, read.table, header = FALSE)
tam=as.data.frame(tablesitam)#dados brutos
chuchu[,i]= as.data.frame(rowMeans(tam))
}
View(chuchu)
View(chuchu)
setwd("C:/Users/Vrios/Dropbox/Doutorado/codigo/socrats/Socrats_Doc_replicas")
library("matrixStats")
files  <- list.files(pattern = 'g_tam_')
temp_length <- read.table(textConnection(files), sep = "_")
mem_lengths = unique(temp_length[17])
mem_lengths=sort(mem_lengths[,])
tamanhos=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
i=1
n_iter=2000
tamanhos=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
i=1
for (i in 1:length(mem_lengths))
{
reg.exp=paste('g_tam.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_tam=list.files(pattern = temp)
tablesitam <- lapply(i_tam, read.table, header = FALSE)
tam=as.data.frame(tablesitam)#dados brutos
tamanhos[,i]= as.data.frame(rowMeans(tam))
}
colnames(tamanhos) = mem_lengths
View(tamanhos)
View(tamanhos)
View(temp_length)
n_iter=temp_length[19]
n_iter=strtrim(temp_length[19], length(temp_length[19]) - 3)
n_iter=strtrim(temp_length[19], (length(temp_length[19]) - 3))
n_iter= strtrim(temp_length[1,19], width=(length(temp_length[19]) - 3))
temp_length[1,19]
n_iter= strtrim(as.character(temp_length[1,19]), width=(length(temp_length[19]) - 3))
as.character(temp_length[1,19])
n_iter= strtrim(as.character(temp_length[1,19]), width=(length(as.character(temp_length[1,19])) - 3))
n_iter= strtrim(as.character(temp_length[1,19]), width=(length(as.character(temp_length[1,19]))-3))
n_iter= strtrim(as.character(temp_length[1,19]), length(as.character(temp_length[1,19])))
n_iter
temp_length[1,19]
as.character(temp_length[1,19])
length(as.character(temp_length[1,19]))
length((temp_length[1,19]))
length(as.character(temp_length[1,19]))
n_iter= as.character(temp_length[1,19])
n_iter
n_iter= strtrim(n_iter, length(n_iter)-4)
length(n_iter)
length(as.character(n_iter)
length(as.character(n_iter))
as.character(n_iter)
n_iter= strtrim(n_iter, n_iter-4)
n_iter= strtrim(n_iter, nchar(n_iter)-4)
n_iter
files  <- list.files(pattern = 'g_tam_')
temp_length <- read.table(textConnection(files), sep = "_")
mem_lengths = unique(temp_length[17])
mem_lengths=sort(mem_lengths[,])
n_iter= as.character(temp_length[1,19])
n_iter= strtrim(n_iter, nchar(n_iter)-4)
n_iter # numero de iterações
reg=paste('g_tam.*',as.character(z),'.*', sep="")
tamanhos=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
tamanhos=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
temp_length <- read.table(textConnection(files), sep = "_")
mem_lengths = unique(temp_length[17])
mem_lengths=sort(mem_lengths[,])
n_iter= as.character(temp_length[1,19])
n_iter= strtrim(n_iter, nchar(n_iter)-4)
n_iter # numero de iterações
tamanhos=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(tamanhos) = mem_lengths
n_iter= as.numeric(strtrim(n_iter, nchar(n_iter)-4))
n_iter # numero de iterações
n_iter= as.numeric(strtrim(n_iter, nchar(n_iter)-4))
n_iter= as.character(temp_length[1,19])
n_iter= as.numeric(strtrim(n_iter, nchar(n_iter)-4))
n_iter # numero de iterações
tamanhos=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(tamanhos) = mem_lengths
for (i in 1:length(mem_lengths))
{
reg.exp=paste('g_tam.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_tam=list.files(pattern = temp)
tablesitam <- lapply(i_tam, read.table, header = FALSE)
tam=as.data.frame(tablesitam)#dados brutos
tamanhos[,i]= as.data.frame(rowMeans(tam))
}
View(tamanhos)
View(tamanhos)
#read only files with  a given memory length
tamanhos.medios=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(tamanhos.medios) = mem_lengths
for (i in 1:length(mem_lengths))
{
reg.exp=paste('g_tam.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_tam=list.files(pattern = temp)
tablesitam <- lapply(i_tam, read.table, header = FALSE)
tam=as.data.frame(tablesitam)#dados brutos
tamanhos.medios[,i]= as.data.frame(rowMeans(tam))
}
setwd("C:/Users/Vrios/Dropbox/Doutorado/codigo/socrats/Socrats_Doc_replicas")
library("matrixStats")
##memoria individual
#tamanhos dos clusters
# list files with .txt extension
files  <- list.files(pattern = 'g_')
#read memory lengths from filenames
temp_length <- read.table(textConnection(files), sep = "_")
mem_lengths = unique(temp_length[17])
mem_lengths=sort(mem_lengths[,])
n_iter= as.character(temp_length[1,19])
n_iter= as.numeric(strtrim(n_iter, nchar(n_iter)-4))
n_iter # numero de iterações
#expressão regular g_tam.*tMem_2000.* -> retorna tudo que tiver g_tam e tMem_2000 em qualquer lugar da string
# reg=paste('g_tam.*',as.character(z),'.*', sep="")
# la=grep(pattern=reg,i_tam,value=TRUE)
# la
#read only files with  a given memory length
tamanhos.medios=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(tamanhos.medios) = mem_lengths
for (i in 1:length(mem_lengths))
{
#create file list with selected memory lengths
reg.exp=paste('g_tam.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_tam=list.files(pattern = temp)
#read files
tablesitam <- lapply(i_tam, read.table, header = FALSE)
#calculates average group size for given memory length
tam=as.data.frame(tablesitam)#dados brutos
tamanhos.medios[,i]= as.data.frame(rowMeans(tam))
}
View(tamanhos.medios)
View(tamanhos.medios)
n.medios=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(n.medios) = mem_lengths
for (i in 1:length(mem_lengths))
{
#create file list with selected memory lengths
reg.exp=paste('g_num.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_n=list.files(pattern = temp)
#read files
tablesin <- lapply(i_n, read.table, header = FALSE)
#calculates average group size for given memory length
n=as.data.frame(tablesn)#dados brutos
n.medios[,i]= as.data.frame(rowSds(sd))
}
files  <- list.files(pattern = 'g_')
#read memory lengths from filenames
temp_length <- read.table(textConnection(files), sep = "_")
mem_lengths = unique(temp_length[17])
mem_lengths=sort(mem_lengths[,])
n_iter= as.character(temp_length[1,19])
n_iter= as.numeric(strtrim(n_iter, nchar(n_iter)-4))
n_iter # numero de iterações
#expressão regular g_tam.*tMem_2000.* -> retorna tudo que tiver g_tam e tMem_2000 em qualquer lugar da string
# reg=paste('g_tam.*',as.character(z),'.*', sep="")
# la=grep(pattern=reg,i_tam,value=TRUE)
# la
#read only files with  a given memory length
tamanhos.medios=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(tamanhos.medios) = mem_lengths
#calculate average group size
for (i in 1:length(mem_lengths))
{
#create file list with selected memory lengths
reg.exp=paste('g_tam.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_tam=list.files(pattern = temp)
#read files
tablesitam <- lapply(i_tam, read.table, header = FALSE)
#calculates average group size for given memory length
tam=as.data.frame(tablesitam)#dados brutos
tamanhos.medios[,i]= as.data.frame(rowMeans(tam))
}
View(tamanhos.medios)
View(tamanhos.medios)
#calculate average group size
for (i in 1:length(mem_lengths))
{
#create file list with selected memory lengths
reg.exp=paste('g_tam.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_tam=list.files(pattern = temp)
#read files
tablesitam <- lapply(i_tam, read.table, header = FALSE)
#calculates average group size for given memory length
tam=as.data.frame(tablesitam)#dados brutos
tamanhos.medios[,i]= as.data.frame(rowMeans(tam))
}
#calculate group size average standard deviation
sd.medios=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(sd.medios) = mem_lengths
for (i in 1:length(mem_lengths))
{
#create file list with selected memory lengths
reg.exp=paste('g_var.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_sd=list.files(pattern = temp)
#read files
tablesisd <- lapply(i_sd, read.table, header = FALSE)
#calculates average group size for given memory length
sd=as.data.frame(tablesisd)#dados brutos
sd.medios[,i]= as.data.frame(rowSds(sd))
}
#calculate group size average standard deviation
n.medios=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(n.medios) = mem_lengths
for (i in 1:length(mem_lengths))
{
#create file list with selected memory lengths
reg.exp=paste('g_num.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_n=list.files(pattern = temp)
#read files
tablesin <- lapply(i_n, read.table, header = FALSE)
#calculates average group size for given memory length
n=as.data.frame(tablesn)#dados brutos
n.medios[,i]= as.data.frame(rowSds(sd))
}
n.medios=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(n.medios) = mem_lengths
for (i in 1:length(mem_lengths))
{
#create file list with selected memory lengths
reg.exp=paste('g_num.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_n=list.files(pattern = temp)
#read files
tablesin <- lapply(i_n, read.table, header = FALSE)
#calculates average group size for given memory length
n=as.data.frame(tablesin)#dados brutos
n.medios[,i]= as.data.frame(rowSds(sd))
}
View(n)
x11()
plot(tamanhos.medios[,1], type= "p", col="black",
ylim=c(0,50),
xlab="tempo /tamanho dos clusters/individual/ mem = 100",# ylab="media do tamanho médio do cluster"
)
plot(tamanhos.medios[,1], type= "p", col="black",
ylim=c(0,50),
col=rainbow().
xlab="tempo /tamanho dos clusters/individual/ mem = 100",# ylab="media do tamanho médio do cluster"
)
plot(tamanhos.medios
#[,1]
,
type= "p", col="black",
ylim=c(0,50),
col=rainbow().
xlab="tempo /tamanho dos clusters/individual/ mem = 100",# ylab="media do tamanho médio do cluster"
)
plot(tamanhos.medios)
plot(tamanhos.medios,
type= "p",
#col="black",
ylim=c(0,50),
col=rainbow().
xlab="tempo /tamanho dos clusters/individual/ mem = 100",# ylab="media do tamanho médio do cluster"
)
plot(tamanhos.medios,
type= "p",
#col="black",
ylim=c(0,50),
col=rainbow(),
xlab="tempo /tamanho dos clusters/individual/ mem = 100",# ylab="media do tamanho médio do cluster"
)
plot(tamanhos.medios,
type= "p",
#col="black",
ylim=c(0,50),
col=rainbow,
xlab="tempo /tamanho dos clusters/individual/ mem = 100",# ylab="media do tamanho médio do cluster"
)
plot.data.frame(tamanhos.medios)
require(graphics)
plot.data.frame(tamanhos.medios)
plot(tamanhos.medios)
View(tamanhos.medios)
matplot(tamanhos.medios)
x11()
matplot(tamanhos.medios, type = "l")
matplot(tamanhos.medios, type = "l")
x11()
matplot(tamanhos.medios, type = "l")
x11()
matplot(tamanhos.medios, type = "l")
x11()
matplot(sd.medios, type = "l")
x11()
matplot(n.medios.medios, type = "l")
x11()
matplot(tamanhos.medios, type = "l")
x11()
matplot(sd.medios, type = "l")
x11()
matplot(n.medios, type = "l")
View(sd)
View(sd.medios)
View(n.medios)
sd.medios=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(sd.medios) = mem_lengths
for (i in 1:length(mem_lengths))
{
#create file list with selected memory lengths
reg.exp=paste('g_var.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_sd=list.files(pattern = temp)
#read files
tablesisd <- lapply(i_sd, read.table, header = FALSE)
#calculates average group size for given memory length
sd=as.data.frame(tablesisd)#dados brutos
sd.medios[,i]= as.data.frame(rowSds(sd))
}
n.medios=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(n.medios) = mem_lengths
for (i in 1:length(mem_lengths))
{
#create file list with selected memory lengths
reg.exp=paste('g_num.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_n=list.files(pattern = temp)
#read files
tablesin <- lapply(i_n, read.table, header = FALSE)
#calculates average group size for given memory length
n=as.data.frame(tablesin)#dados brutos
n.medios[,i]= as.data.frame(rowSds(sd))
}
View(sd.medios)
View(sd)
View(n.medios)
sd.medios=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(sd.medios) = mem_lengths
i=1
reg.exp=paste('g_var.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_sd=list.files(pattern = temp)
#read files
tablesisd <- lapply(i_sd, read.table, header = FALSE)
#calculates average group size for given memory length
sd=as.data.frame(tablesisd)#dados brutos
sd.medios[,i]= as.data.frame(rowSds(sd))
View(sd.medios)
View(sd.medios)
View(sd.medios)
setwd("C:/Users/Vrios/Dropbox/Doutorado/codigo/socrats/Socrats_Doc_replicas")
library("matrixStats")
##memoria individual
#tamanhos dos clusters
# list files with .txt extension
files  <- list.files(pattern = 'g_')
#read memory lengths from filenames
temp_length <- read.table(textConnection(files), sep = "_")
mem_lengths = unique(temp_length[17])
mem_lengths=sort(mem_lengths[,])
n_iter= as.character(temp_length[1,19])
n_iter= as.numeric(strtrim(n_iter, nchar(n_iter)-4))
n_iter
tamanhos.medios=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(tamanhos.medios) = mem_lengths
#calculate average group size
for (i in 1:length(mem_lengths))
{
#create file list with selected memory lengths
reg.exp=paste('g_tam.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_tam=list.files(pattern = temp)
#read files
tablesitam <- lapply(i_tam, read.table, header = FALSE)
#calculates average group size for given memory length
tam=as.data.frame(tablesitam)#dados brutos
tamanhos.medios[,i]= as.data.frame(rowMeans(tam))
}
#calculate group size average standard deviation
sd.medios=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(sd.medios) = mem_lengths
i=1
View(tamanhos.medios)
View(sd.medios)
View(temp_length)
length(mem_lengths)
reg.exp=paste('g_var.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
temp
i_sd=list.files(pattern = temp)
i_sd
i_tam
i_tam
for (i in 1:length(mem_lengths))
{
#create file list with selected memory lengths
reg.exp=paste('g_tam.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_tam=list.files(pattern = temp)
#read files
tablesitam <- lapply(i_tam, read.table, header = FALSE)
#calculates average group size for given memory length
tam=as.data.frame(tablesitam)#dados brutos
tamanhos.medios[,i]= as.data.frame(rowMeans(tam))
}
View(tamanhos.medios)
files  <- list.files(pattern = 'g_')
#read memory lengths from filenames
temp_length <- read.table(textConnection(files), sep = "_")
mem_lengths = unique(temp_length[17])
mem_lengths=sort(mem_lengths[,])
n_iter= as.character(temp_length[1,19])
n_iter= as.numeric(strtrim(n_iter, nchar(n_iter)-4))
n_iter # nume
tamanhos.medios=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(tamanhos.medios) = mem_lengths
for (i in 1:length(mem_lengths))
{
#create file list with selected memory lengths
reg.exp=paste('g_tam.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_tam=list.files(pattern = temp)
#read files
tablesitam <- lapply(i_tam, read.table, header = FALSE)
#calculates average group size for given memory length
tam=as.data.frame(tablesitam)#dados brutos
tamanhos.medios[,i]= as.data.frame(rowMeans(tam))
}
View(tamanhos.medios)
sd.medios=as.data.frame(data.frame(matrix(NA, nrow = n_iter, ncol = length(mem_lengths))))
colnames(sd.medios) = mem_lengths
i=1
for (i in 1:length(mem_lengths))
{
#create file list with selected memory lengths
reg.exp=paste('g_var.*',mem_lengths[i],'.*', sep="")
temp=grep(pattern=reg.exp,files,value=TRUE)
i_sd=list.files(pattern = temp)
#read files
tablesisd <- lapply(i_sd, read.table, header = FALSE)
#calculates average group size for given memory length
sd=as.data.frame(tablesisd)#dados brutos
sd.medios[,i]= as.data.frame(rowSds(sd))
}
View(sd.medios)
